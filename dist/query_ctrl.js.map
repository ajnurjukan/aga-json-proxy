{"version":3,"sources":["../src/query_ctrl.js"],"names":["GenericDatasourceQueryCtrl","$scope","$injector","scope","console","log","target","operators","type","options","segments","query","length","datasource","metricFindQuery","then","result","data","segment","name","panelCtrl","refresh","rawQuery","updateSegments","QueryCtrl","templateUrl"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;IAEaA,0B,WAAAA,0B;;;AACZ,qCAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAAA;;AAAA,sJACxBD,MADwB,EAChBC,SADgB;;AAE9B,QAAKC,KAAL,GAAaF,MAAb;AACAG,UAAQC,GAAR,CAAY,aAAZ,EAA2B,MAAKC,MAAL,CAAYA,MAAvC;;AAEA,QAAKC,SAAL,GAAiB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,IAAhB,CAAjB;AACA,QAAKD,MAAL,CAAYA,MAAZ,GAAqB,MAAKA,MAAL,CAAYA,MAAZ,IAAsB,eAA3C;AACA,QAAKA,MAAL,CAAYE,IAAZ,GAAmB,MAAKF,MAAL,CAAYE,IAAZ,IAAoB,WAAvC;AACA,QAAKF,MAAL,CAAYG,OAAZ,GAAsB,MAAKH,MAAL,CAAYG,OAAZ,IAAuB,EAA7C;AACA,QAAKH,MAAL,CAAYI,QAAZ,GAAuB,MAAKJ,MAAL,CAAYI,QAAZ,IAAwB,EAA/C;AAT8B;AAU9B;;;;6BAEUC,K,EAAO;AAAA;;AACjB,OAAIA,SAAS,EAAT,IAAe,KAAKL,MAAL,CAAYG,OAAZ,CAAoBG,MAApB,GAA6B,CAAhD,EAAmD;AAClD,WAAO,KAAKN,MAAL,CAAYG,OAAnB;AACA;;AAED,UAAO,KAAKI,UAAL,CAAgBC,eAAhB,CAAgCH,SAAS,EAAzC,EAA6CI,IAA7C,CAAkD,kBAAU;AAClE,WAAKT,MAAL,CAAYG,OAAZ,GAAsBO,OAAOC,IAA7B;AACA,WAAOD,OAAOC,IAAd;AACA,IAHM,CAAP;AAIA;;;oCAEiBC,O,EAASP,K,EAAO;AACjC,OAAIA,SAAS,EAAT,IAAeO,QAAQT,OAAR,CAAgBG,MAAhB,GAAyB,CAA5C,EAA+C;AAC9C,WAAOM,QAAQT,OAAf;AACA;;AAED,UAAO,KAAKI,UAAL,CAAgBC,eAAhB,CAAgCI,QAAQC,IAAxC,EAA8CJ,IAA9C,CAAmD,kBAAU;AACnEG,YAAQT,OAAR,GAAkBO,OAAOC,IAAzB;AACA,WAAOD,OAAOC,IAAd;AACA,IAHM,CAAP;AAIA;;;mCAEgB;AAAA;;AAChB,OAAI,KAAKX,MAAL,CAAYA,MAAZ,IAAsB,KAAKA,MAAL,CAAYA,MAAZ,IAAsB,eAAhD,EAAiE;AAChE,SAAKO,UAAL,CAAgBC,eAAhB,CAAgC,KAAKR,MAAL,CAAYA,MAAZ,IAAsB,EAAtD,EAA0DS,IAA1D,CAA+D,kBAAU;AACxE,YAAKT,MAAL,CAAYI,QAAZ,GAAuBM,OAAOC,IAA9B;AACA,YAAKG,SAAL,CAAeC,OAAf;AACA,KAHD,EAGG;AACH;AACD;;;qCAEkB;AAClB,QAAKf,MAAL,CAAYgB,QAAZ,GAAuB,CAAC,KAAKhB,MAAL,CAAYgB,QAApC;AACA;;;mCAEgB;AAChB,QAAKC,cAAL;AACA;;;qCAEkB;AAClB,QAAKH,SAAL,CAAeC,OAAf,GADkB,CACQ;AAC1B;;;;EAtD8CG,c;;AA0DhDxB,2BAA2ByB,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import { QueryCtrl } from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\tconstructor($scope, $injector) {\n\t\tsuper($scope, $injector);\n\t\tthis.scope = $scope;\n\t\tconsole.log(\"constructor\", this.target.target);\n\n\t\tthis.operators = [\"<\", \">\", \"=\", \"!=\"];\n\t\tthis.target.target = this.target.target || 'select metric';\n\t\tthis.target.type = this.target.type || 'timeserie';\n\t\tthis.target.options = this.target.options || [];\n\t\tthis.target.segments = this.target.segments || [];\n\t}\n\n\tgetOptions(query) {\n\t\tif (query != \"\" && this.target.options.length > 0) {\n\t\t\treturn this.target.options;\n\t\t}\n\n\t\treturn this.datasource.metricFindQuery(query || '').then(result => {\n\t\t\tthis.target.options = result.data;\n\t\t\treturn result.data;\n\t\t});\n\t}\n\n\tgetSegmentOptions(segment, query) {\n\t\tif (query != \"\" && segment.options.length > 0) {\n\t\t\treturn segment.options;\n\t\t}\n\n\t\treturn this.datasource.metricFindQuery(segment.name).then(result => {\n\t\t\tsegment.options = result.data;\n\t\t\treturn result.data;\n\t\t});\n\t}\n\n\tupdateSegments() {\n\t\tif (this.target.target && this.target.target != 'select metric') {\n\t\t\tthis.datasource.metricFindQuery(this.target.target || '').then(result => {\n\t\t\t\tthis.target.segments = result.data;\n\t\t\t\tthis.panelCtrl.refresh();\n\t\t\t});;\n\t\t}\n\t}\n\n\ttoggleEditorMode() {\n\t\tthis.target.rawQuery = !this.target.rawQuery;\n\t}\n\n\tonChangeTarget() {\n\t\tthis.updateSegments();\n\t}\n\n\tonChangeInternal() {\n\t\tthis.panelCtrl.refresh(); // Asks the panel to refresh data.\n\t}\n\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}